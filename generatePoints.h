#include "Config.h"

double distance(double x1, double y1, double x2, double y2) {
    return sqrt(pow(x1 - x2, 2) + pow(y1 - y2, 2));
}

void generatePoints(double *points, int numPointsToCreate, Config config) {
    /// Generate Random Points
    for (int i = 0; i < numPointsToCreate; i++) {
        points[i * 2] = (random() / (double) RAND_MAX) * config.RAND_POINT_MAX;
        points[(i * 2) + 1] = (random() / (double) RAND_MAX) * config.RAND_POINT_MAX;

        if (config.__PRINT_RANDOM_POINTS__) {
            //* Print the points generated by the current process.
            //* Format: "identifier,i,x,y"
            printf("generated_points,%i,%lf,%lf\n", i, points[i * 2], points[(i * 2) + 1]);
        }
    }

    int edgeCount = 0;

    /// Create Dissimilarity Matrix := in the future, this would be an
    double **L = (double **) malloc(numPointsToCreate * sizeof(double *));
    for (int i = 0; i < numPointsToCreate; i++) {
        L[i] = (double *) malloc(numPointsToCreate * sizeof(double));

        for (int j = 0; j < numPointsToCreate; j++) {
            double d = distance(points[i * 2], points[(i * 2) + 1], points[j * 2], points[(j * 2) + 1]);
            L[i][j] = d < config.DISTANCE_THRESHOLD ? d : -1;
//                L[i][j] = d < DISTANCE_THRESHOLD ? 1 : -1;

            if (L[i][j] != -1) {
                edgeCount++;

                if (config.__PRINT_EDGES__) {
                    //* Print the adjacency matrix values (and the associated weights)
                    //* Format: "identifier,i,j,w(i,j)"
                    printf("adjacency_matrix,%i,%i,%lf\n", i, j, L[i][j]);
                }
            }
        }
    }

    if (config.__PRINT_EDGE_COUNT__) {
        //* Print edge count
        //* Format: "identifier,edge_count"
        printf("edge_count,%i\n", edgeCount);
    }
}